#
# Copyright (c) 2025 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#

admin:
  address:
    pipe:
      path: /run/sockets/admin.socket

static_resources:

  listeners:

  # This listener receives traffic from outside, so it needs to be secured with CORS, TLS, authentication and
  # authorization.
  - name: ingress
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
          use_remote_address: true
          xff_num_trusted_hops: 1
          stat_prefix: ingress
          route_config:
            name: backend
            virtual_hosts:
            - name: all
              domains:
              - "*"
              typed_per_filter_config:
                envoy.filters.http.cors:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                  allow_origin_string_match:
                  - safe_regex:
                      regex: ".*"
                  allow_methods: "POST"
                  allow_headers: "Authorization, Content-Type, X-User-Agent, X-Grpc-Web"
                  allow_credentials: true
                  max_age: "86400"
              routes:

              # This route is for the REST gateway, and for that we need to disable the auth filter because requests
              # will go to the gateway and then again to Envoy, translated to gRPC, and it is then when the auth filter
              # will be applied.
              - name: gateway
                match:
                  prefix: /api
                route:
                  cluster: gateway
                  timeout: 300s
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true

              - name: server
                match:
                  prefix: /
                route:
                  cluster: server
                  timeout: 300s
                typed_per_filter_config:
                  envoy.filters.http.header_mutation:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute
                    mutations:
                      request_mutations:
                      - remove: authorization

          http_filters:
          - name: envoy.filters.http.grpc_web
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              grpc_service:
                envoy_grpc:
                  cluster_name: authorino
                timeout: 1s
              failure_mode_allow: false
          - name: envoy.filters.http.header_mutation
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.header_mutation.v3.HeaderMutation
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            alpn_protocols:
            - http1.1
            - h2
            tls_certificates:
            - certificate_chain:
                filename: /etc/envoy/tls/tls.crt
              private_key:
                filename: /etc/envoy/tls/tls.key

  # This listener is used only for requests from the REST gateway. Those are internal only, and always gRPC, so we don't
  # need CORS or TLS, but we do need authentication and authorization.
  - name: gateway
    address:
      pipe:
        path: /run/sockets/ingress.socket
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
          use_remote_address: true
          xff_num_trusted_hops: 1
          stat_prefix: gateway
          route_config:
            name: backend
            virtual_hosts:
            - name: all
              domains:
              - "*"
              routes:
              - name: server
                match:
                  prefix: /
                route:
                  cluster: server
                  timeout: 300s
                typed_per_filter_config:
                  envoy.filters.http.header_mutation:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute
                    mutations:
                      request_mutations:
                      - remove: authorization
                      - remove: grpcgateway-authorization
          http_filters:
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              grpc_service:
                envoy_grpc:
                  cluster_name: authorino
                timeout: 1s
              failure_mode_allow: false
          - name: envoy.filters.http.header_mutation
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.header_mutation.v3.HeaderMutation
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:

  - name: authorino
    connect_timeout: 1s
    type: STRICT_DNS
    lb_policy: RANDOM
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: authorino
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: authorino-authorino-authorization
                port_value: 50051
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          validation_context:
            trusted_ca:
              filename: /etc/envoy/tls/ca.crt

  - name: server
    connect_timeout: 1s
    type: STATIC
    lb_policy: ROUND_ROBIN
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: server
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              pipe:
                path: /run/sockets/server.socket

  - name: gateway
    connect_timeout: 1s
    type: STATIC
    lb_policy: ROUND_ROBIN
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: gateway
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              pipe:
                path: /run/sockets/gateway.socket
