//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

syntax = "proto3";

package private.v1;

import "fulfillment/v1/cluster_order_type.proto";
import "private/v1/cluster_order_type.proto";

message ClusterOrdersListRequest {
  optional int32 offset = 1;
  optional int32 limit = 2;
  optional string filter = 3;
}

message ClusterOrdersListResponse {
  optional int32 size = 1;
  optional int32 total = 2;
  repeated fulfillment.v1.ClusterOrder public = 3;
  repeated ClusterOrder private = 4;
}

message ClusterOrdersGetRequest {
  string id = 1;
}

message ClusterOrdersGetResponse {
  fulfillment.v1.ClusterOrder public = 1;
  ClusterOrder private = 2;
}

message ClusterOrdersCreateRequest {
  fulfillment.v1.ClusterOrder public = 1;
  ClusterOrder private = 2;
}

message ClusterOrdersCreateResponse {
  fulfillment.v1.ClusterOrder public = 1;
  ClusterOrder private = 2;
}

message ClusterOrdersDeleteRequest {
  string id = 1;
}

message ClusterOrdersDeleteResponse {}

message ClusterOrdersUpdateRequest {
  fulfillment.v1.ClusterOrder public = 1;
  ClusterOrder private = 2;
}

message ClusterOrdersUpdateResponse {
  fulfillment.v1.ClusterOrder public = 1;
  ClusterOrder private = 2;
}

service ClusterOrders {
  rpc List(ClusterOrdersListRequest) returns (ClusterOrdersListResponse) {}
  rpc Get(ClusterOrdersGetRequest) returns (ClusterOrdersGetResponse) {}
  rpc Create(ClusterOrdersCreateRequest) returns (ClusterOrdersCreateResponse) {}
  rpc Delete(ClusterOrdersDeleteRequest) returns (ClusterOrdersDeleteResponse) {}
  rpc Update(ClusterOrdersUpdateRequest) returns (ClusterOrdersUpdateResponse) {}
}
