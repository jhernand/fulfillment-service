//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: tests/v1/public_type.proto

//go:build !protoopaque

package testsv1

import (
	v1 "github.com/innabox/fulfillment-service/internal/api/shared/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is an object type used in unit tests.
type Public struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique identifier of the object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata of the object.
	Metadata *v1.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Miscellanea fields used in tests.
	MyBool      bool                   `protobuf:"varint,3,opt,name=my_bool,json=myBool,proto3" json:"my_bool,omitempty"`
	MyInt32     int32                  `protobuf:"varint,4,opt,name=my_int32,json=myInt32,proto3" json:"my_int32,omitempty"`
	MyInt64     int64                  `protobuf:"varint,5,opt,name=my_int64,json=myInt64,proto3" json:"my_int64,omitempty"`
	MyString    string                 `protobuf:"bytes,6,opt,name=my_string,json=myString,proto3" json:"my_string,omitempty"`
	MyFloat     float32                `protobuf:"fixed32,7,opt,name=my_float,json=myFloat,proto3" json:"my_float,omitempty"`
	MyDouble    float64                `protobuf:"fixed64,8,opt,name=my_double,json=myDouble,proto3" json:"my_double,omitempty"`
	MyTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=my_timestamp,json=myTimestamp,proto3" json:"my_timestamp,omitempty"`
	MyBytes     []byte                 `protobuf:"bytes,10,opt,name=my_bytes,json=myBytes,proto3" json:"my_bytes,omitempty"`
	MyMsg       *Public                `protobuf:"bytes,11,opt,name=my_msg,json=myMsg,proto3" json:"my_msg,omitempty"`
	MyRepeated  []*Public              `protobuf:"bytes,12,rep,name=my_repeated,json=myRepeated,proto3" json:"my_repeated,omitempty"`
	MyMap       map[string]*Public     `protobuf:"bytes,13,rep,name=my_map,json=myMap,proto3" json:"my_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Spec and status:
	Spec          *Spec   `protobuf:"bytes,14,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *Status `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Public) Reset() {
	*x = Public{}
	mi := &file_tests_v1_public_type_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Public) ProtoMessage() {}

func (x *Public) ProtoReflect() protoreflect.Message {
	mi := &file_tests_v1_public_type_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Public) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Public) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Public) GetMyBool() bool {
	if x != nil {
		return x.MyBool
	}
	return false
}

func (x *Public) GetMyInt32() int32 {
	if x != nil {
		return x.MyInt32
	}
	return 0
}

func (x *Public) GetMyInt64() int64 {
	if x != nil {
		return x.MyInt64
	}
	return 0
}

func (x *Public) GetMyString() string {
	if x != nil {
		return x.MyString
	}
	return ""
}

func (x *Public) GetMyFloat() float32 {
	if x != nil {
		return x.MyFloat
	}
	return 0
}

func (x *Public) GetMyDouble() float64 {
	if x != nil {
		return x.MyDouble
	}
	return 0
}

func (x *Public) GetMyTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MyTimestamp
	}
	return nil
}

func (x *Public) GetMyBytes() []byte {
	if x != nil {
		return x.MyBytes
	}
	return nil
}

func (x *Public) GetMyMsg() *Public {
	if x != nil {
		return x.MyMsg
	}
	return nil
}

func (x *Public) GetMyRepeated() []*Public {
	if x != nil {
		return x.MyRepeated
	}
	return nil
}

func (x *Public) GetMyMap() map[string]*Public {
	if x != nil {
		return x.MyMap
	}
	return nil
}

func (x *Public) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Public) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Public) SetId(v string) {
	x.Id = v
}

func (x *Public) SetMetadata(v *v1.Metadata) {
	x.Metadata = v
}

func (x *Public) SetMyBool(v bool) {
	x.MyBool = v
}

func (x *Public) SetMyInt32(v int32) {
	x.MyInt32 = v
}

func (x *Public) SetMyInt64(v int64) {
	x.MyInt64 = v
}

func (x *Public) SetMyString(v string) {
	x.MyString = v
}

func (x *Public) SetMyFloat(v float32) {
	x.MyFloat = v
}

func (x *Public) SetMyDouble(v float64) {
	x.MyDouble = v
}

func (x *Public) SetMyTimestamp(v *timestamppb.Timestamp) {
	x.MyTimestamp = v
}

func (x *Public) SetMyBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.MyBytes = v
}

func (x *Public) SetMyMsg(v *Public) {
	x.MyMsg = v
}

func (x *Public) SetMyRepeated(v []*Public) {
	x.MyRepeated = v
}

func (x *Public) SetMyMap(v map[string]*Public) {
	x.MyMap = v
}

func (x *Public) SetSpec(v *Spec) {
	x.Spec = v
}

func (x *Public) SetStatus(v *Status) {
	x.Status = v
}

func (x *Public) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *Public) HasMyTimestamp() bool {
	if x == nil {
		return false
	}
	return x.MyTimestamp != nil
}

func (x *Public) HasMyMsg() bool {
	if x == nil {
		return false
	}
	return x.MyMsg != nil
}

func (x *Public) HasSpec() bool {
	if x == nil {
		return false
	}
	return x.Spec != nil
}

func (x *Public) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *Public) ClearMetadata() {
	x.Metadata = nil
}

func (x *Public) ClearMyTimestamp() {
	x.MyTimestamp = nil
}

func (x *Public) ClearMyMsg() {
	x.MyMsg = nil
}

func (x *Public) ClearSpec() {
	x.Spec = nil
}

func (x *Public) ClearStatus() {
	x.Status = nil
}

type Public_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier of the object.
	Id string
	// Metadata of the object.
	Metadata *v1.Metadata
	// Miscellanea fields used in tests.
	MyBool      bool
	MyInt32     int32
	MyInt64     int64
	MyString    string
	MyFloat     float32
	MyDouble    float64
	MyTimestamp *timestamppb.Timestamp
	MyBytes     []byte
	MyMsg       *Public
	MyRepeated  []*Public
	MyMap       map[string]*Public
	// Spec and status:
	Spec   *Spec
	Status *Status
}

func (b0 Public_builder) Build() *Public {
	m0 := &Public{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Metadata = b.Metadata
	x.MyBool = b.MyBool
	x.MyInt32 = b.MyInt32
	x.MyInt64 = b.MyInt64
	x.MyString = b.MyString
	x.MyFloat = b.MyFloat
	x.MyDouble = b.MyDouble
	x.MyTimestamp = b.MyTimestamp
	x.MyBytes = b.MyBytes
	x.MyMsg = b.MyMsg
	x.MyRepeated = b.MyRepeated
	x.MyMap = b.MyMap
	x.Spec = b.Spec
	x.Status = b.Status
	return m0
}

type Spec struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	SpecBool      bool                   `protobuf:"varint,1,opt,name=spec_bool,json=specBool,proto3" json:"spec_bool,omitempty"`
	SpecInt32     int32                  `protobuf:"varint,2,opt,name=spec_int32,json=specInt32,proto3" json:"spec_int32,omitempty"`
	SpecInt64     int64                  `protobuf:"varint,3,opt,name=spec_int64,json=specInt64,proto3" json:"spec_int64,omitempty"`
	SpecString    string                 `protobuf:"bytes,4,opt,name=spec_string,json=specString,proto3" json:"spec_string,omitempty"`
	SpecFloat     float32                `protobuf:"fixed32,5,opt,name=spec_float,json=specFloat,proto3" json:"spec_float,omitempty"`
	SpecDouble    float64                `protobuf:"fixed64,6,opt,name=spec_double,json=specDouble,proto3" json:"spec_double,omitempty"`
	SpecBytes     []byte                 `protobuf:"bytes,7,opt,name=spec_bytes,json=specBytes,proto3" json:"spec_bytes,omitempty"`
	SpecTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=spec_timestamp,json=specTimestamp,proto3" json:"spec_timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Spec) Reset() {
	*x = Spec{}
	mi := &file_tests_v1_public_type_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_tests_v1_public_type_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Spec) GetSpecBool() bool {
	if x != nil {
		return x.SpecBool
	}
	return false
}

func (x *Spec) GetSpecInt32() int32 {
	if x != nil {
		return x.SpecInt32
	}
	return 0
}

func (x *Spec) GetSpecInt64() int64 {
	if x != nil {
		return x.SpecInt64
	}
	return 0
}

func (x *Spec) GetSpecString() string {
	if x != nil {
		return x.SpecString
	}
	return ""
}

func (x *Spec) GetSpecFloat() float32 {
	if x != nil {
		return x.SpecFloat
	}
	return 0
}

func (x *Spec) GetSpecDouble() float64 {
	if x != nil {
		return x.SpecDouble
	}
	return 0
}

func (x *Spec) GetSpecBytes() []byte {
	if x != nil {
		return x.SpecBytes
	}
	return nil
}

func (x *Spec) GetSpecTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SpecTimestamp
	}
	return nil
}

func (x *Spec) SetSpecBool(v bool) {
	x.SpecBool = v
}

func (x *Spec) SetSpecInt32(v int32) {
	x.SpecInt32 = v
}

func (x *Spec) SetSpecInt64(v int64) {
	x.SpecInt64 = v
}

func (x *Spec) SetSpecString(v string) {
	x.SpecString = v
}

func (x *Spec) SetSpecFloat(v float32) {
	x.SpecFloat = v
}

func (x *Spec) SetSpecDouble(v float64) {
	x.SpecDouble = v
}

func (x *Spec) SetSpecBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.SpecBytes = v
}

func (x *Spec) SetSpecTimestamp(v *timestamppb.Timestamp) {
	x.SpecTimestamp = v
}

func (x *Spec) HasSpecTimestamp() bool {
	if x == nil {
		return false
	}
	return x.SpecTimestamp != nil
}

func (x *Spec) ClearSpecTimestamp() {
	x.SpecTimestamp = nil
}

type Spec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SpecBool      bool
	SpecInt32     int32
	SpecInt64     int64
	SpecString    string
	SpecFloat     float32
	SpecDouble    float64
	SpecBytes     []byte
	SpecTimestamp *timestamppb.Timestamp
}

func (b0 Spec_builder) Build() *Spec {
	m0 := &Spec{}
	b, x := &b0, m0
	_, _ = b, x
	x.SpecBool = b.SpecBool
	x.SpecInt32 = b.SpecInt32
	x.SpecInt64 = b.SpecInt64
	x.SpecString = b.SpecString
	x.SpecFloat = b.SpecFloat
	x.SpecDouble = b.SpecDouble
	x.SpecBytes = b.SpecBytes
	x.SpecTimestamp = b.SpecTimestamp
	return m0
}

type Status struct {
	state           protoimpl.MessageState `protogen:"hybrid.v1"`
	StatusBool      bool                   `protobuf:"varint,1,opt,name=status_bool,json=statusBool,proto3" json:"status_bool,omitempty"`
	StatusInt32     int32                  `protobuf:"varint,2,opt,name=status_int32,json=statusInt32,proto3" json:"status_int32,omitempty"`
	StatusInt64     int64                  `protobuf:"varint,3,opt,name=status_int64,json=statusInt64,proto3" json:"status_int64,omitempty"`
	StatusString    string                 `protobuf:"bytes,4,opt,name=status_string,json=statusString,proto3" json:"status_string,omitempty"`
	StatusFloat     float32                `protobuf:"fixed32,5,opt,name=status_float,json=statusFloat,proto3" json:"status_float,omitempty"`
	StatusDouble    float64                `protobuf:"fixed64,6,opt,name=status_double,json=statusDouble,proto3" json:"status_double,omitempty"`
	StatusBytes     []byte                 `protobuf:"bytes,7,opt,name=status_bytes,json=statusBytes,proto3" json:"status_bytes,omitempty"`
	StatusTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=status_timestamp,json=statusTimestamp,proto3" json:"status_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_tests_v1_public_type_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_tests_v1_public_type_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Status) GetStatusBool() bool {
	if x != nil {
		return x.StatusBool
	}
	return false
}

func (x *Status) GetStatusInt32() int32 {
	if x != nil {
		return x.StatusInt32
	}
	return 0
}

func (x *Status) GetStatusInt64() int64 {
	if x != nil {
		return x.StatusInt64
	}
	return 0
}

func (x *Status) GetStatusString() string {
	if x != nil {
		return x.StatusString
	}
	return ""
}

func (x *Status) GetStatusFloat() float32 {
	if x != nil {
		return x.StatusFloat
	}
	return 0
}

func (x *Status) GetStatusDouble() float64 {
	if x != nil {
		return x.StatusDouble
	}
	return 0
}

func (x *Status) GetStatusBytes() []byte {
	if x != nil {
		return x.StatusBytes
	}
	return nil
}

func (x *Status) GetStatusTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusTimestamp
	}
	return nil
}

func (x *Status) SetStatusBool(v bool) {
	x.StatusBool = v
}

func (x *Status) SetStatusInt32(v int32) {
	x.StatusInt32 = v
}

func (x *Status) SetStatusInt64(v int64) {
	x.StatusInt64 = v
}

func (x *Status) SetStatusString(v string) {
	x.StatusString = v
}

func (x *Status) SetStatusFloat(v float32) {
	x.StatusFloat = v
}

func (x *Status) SetStatusDouble(v float64) {
	x.StatusDouble = v
}

func (x *Status) SetStatusBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.StatusBytes = v
}

func (x *Status) SetStatusTimestamp(v *timestamppb.Timestamp) {
	x.StatusTimestamp = v
}

func (x *Status) HasStatusTimestamp() bool {
	if x == nil {
		return false
	}
	return x.StatusTimestamp != nil
}

func (x *Status) ClearStatusTimestamp() {
	x.StatusTimestamp = nil
}

type Status_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	StatusBool      bool
	StatusInt32     int32
	StatusInt64     int64
	StatusString    string
	StatusFloat     float32
	StatusDouble    float64
	StatusBytes     []byte
	StatusTimestamp *timestamppb.Timestamp
}

func (b0 Status_builder) Build() *Status {
	m0 := &Status{}
	b, x := &b0, m0
	_, _ = b, x
	x.StatusBool = b.StatusBool
	x.StatusInt32 = b.StatusInt32
	x.StatusInt64 = b.StatusInt64
	x.StatusString = b.StatusString
	x.StatusFloat = b.StatusFloat
	x.StatusDouble = b.StatusDouble
	x.StatusBytes = b.StatusBytes
	x.StatusTimestamp = b.StatusTimestamp
	return m0
}

var File_tests_v1_public_type_proto protoreflect.FileDescriptor

var file_tests_v1_public_type_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x04, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x79, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x6d, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x79, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x79,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x06, 0x6d, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x05, 0x6d, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x0a, 0x6d, 0x79, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06,
	0x6d, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x4d,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x79, 0x4d, 0x61, 0x70,
	0x12, 0x22, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x4a,
	0x0a, 0x0a, 0x4d, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x02, 0x0a, 0x04, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xc6, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0xa6, 0x01, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x6e, 0x61, 0x62,
	0x6f, 0x78, 0x2f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x54, 0x65, 0x73, 0x74, 0x73, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x14, 0x54, 0x65, 0x73, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x54, 0x65, 0x73, 0x74, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_tests_v1_public_type_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tests_v1_public_type_proto_goTypes = []any{
	(*Public)(nil),                // 0: tests.v1.Public
	(*Spec)(nil),                  // 1: tests.v1.Spec
	(*Status)(nil),                // 2: tests.v1.Status
	nil,                           // 3: tests.v1.Public.MyMapEntry
	(*v1.Metadata)(nil),           // 4: shared.v1.Metadata
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_tests_v1_public_type_proto_depIdxs = []int32{
	4,  // 0: tests.v1.Public.metadata:type_name -> shared.v1.Metadata
	5,  // 1: tests.v1.Public.my_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 2: tests.v1.Public.my_msg:type_name -> tests.v1.Public
	0,  // 3: tests.v1.Public.my_repeated:type_name -> tests.v1.Public
	3,  // 4: tests.v1.Public.my_map:type_name -> tests.v1.Public.MyMapEntry
	1,  // 5: tests.v1.Public.spec:type_name -> tests.v1.Spec
	2,  // 6: tests.v1.Public.status:type_name -> tests.v1.Status
	5,  // 7: tests.v1.Spec.spec_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 8: tests.v1.Status.status_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 9: tests.v1.Public.MyMapEntry.value:type_name -> tests.v1.Public
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tests_v1_public_type_proto_init() }
func file_tests_v1_public_type_proto_init() {
	if File_tests_v1_public_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tests_v1_public_type_proto_rawDesc), len(file_tests_v1_public_type_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_v1_public_type_proto_goTypes,
		DependencyIndexes: file_tests_v1_public_type_proto_depIdxs,
		MessageInfos:      file_tests_v1_public_type_proto_msgTypes,
	}.Build()
	File_tests_v1_public_type_proto = out.File
	file_tests_v1_public_type_proto_goTypes = nil
	file_tests_v1_public_type_proto_depIdxs = nil
}
