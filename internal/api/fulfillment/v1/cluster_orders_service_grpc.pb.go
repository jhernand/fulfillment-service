//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fulfillment/v1/cluster_orders_service.proto

package fulfillmentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterOrders_List_FullMethodName   = "/fulfillment.v1.ClusterOrders/List"
	ClusterOrders_Get_FullMethodName    = "/fulfillment.v1.ClusterOrders/Get"
	ClusterOrders_Place_FullMethodName  = "/fulfillment.v1.ClusterOrders/Place"
	ClusterOrders_Cancel_FullMethodName = "/fulfillment.v1.ClusterOrders/Cancel"
)

// ClusterOrdersClient is the client API for ClusterOrders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterOrdersClient interface {
	// Retrieves the list of cluster orders.
	List(ctx context.Context, in *ClusterOrdersListRequest, opts ...grpc.CallOption) (*ClusterOrdersListResponse, error)
	// Retrieves the details of one specific cluster order.
	Get(ctx context.Context, in *ClusterOrdersGetRequest, opts ...grpc.CallOption) (*ClusterOrdersGetResponse, error)
	// Places a new cluster order.
	Place(ctx context.Context, in *ClusterOrdersPlaceRequest, opts ...grpc.CallOption) (*ClusterOrdersPlaceResponse, error)
	// Cancels a cluster order.
	Cancel(ctx context.Context, in *ClusterOrdersCancelRequest, opts ...grpc.CallOption) (*ClusterOrdersCancelResponse, error)
}

type clusterOrdersClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterOrdersClient(cc grpc.ClientConnInterface) ClusterOrdersClient {
	return &clusterOrdersClient{cc}
}

func (c *clusterOrdersClient) List(ctx context.Context, in *ClusterOrdersListRequest, opts ...grpc.CallOption) (*ClusterOrdersListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterOrdersListResponse)
	err := c.cc.Invoke(ctx, ClusterOrders_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterOrdersClient) Get(ctx context.Context, in *ClusterOrdersGetRequest, opts ...grpc.CallOption) (*ClusterOrdersGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterOrdersGetResponse)
	err := c.cc.Invoke(ctx, ClusterOrders_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterOrdersClient) Place(ctx context.Context, in *ClusterOrdersPlaceRequest, opts ...grpc.CallOption) (*ClusterOrdersPlaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterOrdersPlaceResponse)
	err := c.cc.Invoke(ctx, ClusterOrders_Place_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterOrdersClient) Cancel(ctx context.Context, in *ClusterOrdersCancelRequest, opts ...grpc.CallOption) (*ClusterOrdersCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterOrdersCancelResponse)
	err := c.cc.Invoke(ctx, ClusterOrders_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterOrdersServer is the server API for ClusterOrders service.
// All implementations must embed UnimplementedClusterOrdersServer
// for forward compatibility.
type ClusterOrdersServer interface {
	// Retrieves the list of cluster orders.
	List(context.Context, *ClusterOrdersListRequest) (*ClusterOrdersListResponse, error)
	// Retrieves the details of one specific cluster order.
	Get(context.Context, *ClusterOrdersGetRequest) (*ClusterOrdersGetResponse, error)
	// Places a new cluster order.
	Place(context.Context, *ClusterOrdersPlaceRequest) (*ClusterOrdersPlaceResponse, error)
	// Cancels a cluster order.
	Cancel(context.Context, *ClusterOrdersCancelRequest) (*ClusterOrdersCancelResponse, error)
	mustEmbedUnimplementedClusterOrdersServer()
}

// UnimplementedClusterOrdersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterOrdersServer struct{}

func (UnimplementedClusterOrdersServer) List(context.Context, *ClusterOrdersListRequest) (*ClusterOrdersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClusterOrdersServer) Get(context.Context, *ClusterOrdersGetRequest) (*ClusterOrdersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClusterOrdersServer) Place(context.Context, *ClusterOrdersPlaceRequest) (*ClusterOrdersPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Place not implemented")
}
func (UnimplementedClusterOrdersServer) Cancel(context.Context, *ClusterOrdersCancelRequest) (*ClusterOrdersCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedClusterOrdersServer) mustEmbedUnimplementedClusterOrdersServer() {}
func (UnimplementedClusterOrdersServer) testEmbeddedByValue()                       {}

// UnsafeClusterOrdersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterOrdersServer will
// result in compilation errors.
type UnsafeClusterOrdersServer interface {
	mustEmbedUnimplementedClusterOrdersServer()
}

func RegisterClusterOrdersServer(s grpc.ServiceRegistrar, srv ClusterOrdersServer) {
	// If the following call pancis, it indicates UnimplementedClusterOrdersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterOrders_ServiceDesc, srv)
}

func _ClusterOrders_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterOrdersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterOrdersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterOrders_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterOrdersServer).List(ctx, req.(*ClusterOrdersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterOrders_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterOrdersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterOrdersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterOrders_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterOrdersServer).Get(ctx, req.(*ClusterOrdersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterOrders_Place_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterOrdersPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterOrdersServer).Place(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterOrders_Place_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterOrdersServer).Place(ctx, req.(*ClusterOrdersPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterOrders_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterOrdersCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterOrdersServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterOrders_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterOrdersServer).Cancel(ctx, req.(*ClusterOrdersCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterOrders_ServiceDesc is the grpc.ServiceDesc for ClusterOrders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterOrders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment.v1.ClusterOrders",
	HandlerType: (*ClusterOrdersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ClusterOrders_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClusterOrders_Get_Handler,
		},
		{
			MethodName: "Place",
			Handler:    _ClusterOrders_Place_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ClusterOrders_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fulfillment/v1/cluster_orders_service.proto",
}
